pipeline {
    agent any

     stages {
         
        stage('Get Code') {
            steps {
                // Obtener cÃ³digo del repo
                git 'https://github.com/fgg1987/calculadora.git'
                bat 'whoami'
            }
        }
        
        stage('Unit') {
            steps {
                catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                    bat '''
                        hostname
                        whoami
                        set PYTHONPATH=%WORKSPACE%
                        python --version
                        pytest --version
                        pytest --junitxml=result-unit.xml test\\unit
                    '''
               }
            }
        }   
        
        stage('Rest') {
            steps {
                catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                    bat '''
                        hostname
                        whoami
                        set FLASK_APP=app\\api.py
                        set FLASK_ENV=development
                        start flask run
                        timeout /t 15
                        start java -jar C:\\Users\\fgonzalez\\Documents\\wiremock-standalone-3.3.1.jar --port 9090 --root-dir C:\\Users\\fgonzalez\\Documents\\proyecto\\calculadora\\test\\wiremock
                        set PYTHONPATH=%WORKSPACE%
                        timeout /t 30
                        pytest --junitxml=result-rest.xml test\\rest
                    '''
                }
            }
        }
        
        stage('Static') {
            steps {
                bat '''
                    flake8 --format=pylint --exit-zero app >flake8.out
                '''
                recordIssues(tools: [flake8(name: 'Flake8', pattern: 'flake8.out')], qualityGates: [[threshold:8, type: 'TOTAL', unstable: true], [threshold: 10, type: 'TOTAL', unstable: false]])
            }
        }
        
        stage('Performance') {
            steps {
                bat '''
                    set FLASK_APP=app\\api.py
                    set FLASK_ENV=development
                    start flask run
                    C:\\Users\\fgonzalez\\Documents\\apache-jmeter-5.6.3\\bin\\jmeter -n -t test\\jmeter\\flask.jmx -f -l flask.jtl
                '''
                perfReport sourceDataFiles: 'flask.jtl'
            }
        }
        
        stage('Security test') {
            steps {
                bat '''
                    bandit --exit-zero -r . -f custom -o bandit.out --severity-level medium --msg-template "{abspath}:{line}: {test_id}: {msg}
                '''
                recordIssues(tools: [pyLint(name: 'Bandit', pattern: 'bandit.out')], qualityGates: [[threshold:2, type: 'TOTAL', unstable: true], [threshold: 4, type: 'TOTAL', unstable: false]])
            }
        }
        
        stage('Coverage') {
            steps {
                bat '''
                    coverage run --source=app --omit=app\\__init__.py,app\\api.py -m pytest test\\unit  
                    coverage xml
                '''
                cobertura coberturaReportFile: 'coverage.xml', conditionalCoverageTargets: '100, 80, 90', failUnhealthy: false, failUnstable: false, lineCoverageTargets: '100, 85, 95', onlyStable: false
             }
        }
    }
}
